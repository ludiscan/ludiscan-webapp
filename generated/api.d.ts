/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['AppController_getHello'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/robots.txt': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['AppController_getRobots'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/ping': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['AppController_getPing'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** すべてのユーザーを取得 */
    get: operations['UsersController_findAll'];
    put?: never;
    /** ユーザーを作成 */
    post: operations['UsersController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/users/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 特定のユーザーを取得 */
    get: operations['UsersController_findOne'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/auth/google': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Google OAuth開始（サインアップ/ログイン） */
    get: operations['AuthController_googleStart'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/auth/google/link': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 現在のユーザーにGoogleアカウントをリンク
     * @description ログイン済みユーザーのIDを `state` に封入し、/auth/google に302。最終的にコールバックでリンクします。
     */
    get: operations['AuthController_googleLink'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/auth/google/callback': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Google OAuth コールバック
     * @description Passportが `req.user` にGoogleプロフィールをセット。`state` がリンクモードならリンク、そうでなければログイン/サインアップ。最後にフロントへ302（?token=... か ?code=...）。
     */
    get: operations['AuthController_googleCallback'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/auth/identity/google': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 現在のユーザーからGoogleをアンリンク
     * @description 唯一のログイン手段になる場合は拒否するなどのポリシーをAuthService側で実装してください。
     */
    delete: operations['AuthController_unlinkGoogle'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['LoginController_login'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/login/profile': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['LoginController_getProfile'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/projects': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all projects */
    get: operations['ProjectsController_findAll'];
    put?: never;
    /** Create a project */
    post: operations['ProjectsController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/projects/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get project by ID */
    get: operations['ProjectsController_findOne'];
    put?: never;
    post?: never;
    /** Delete a project */
    delete: operations['ProjectsController_delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/projects/{id}/meta_fields': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List meta data keys */
    get: operations['ProjectsController_getMetaDataKeys'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/projects/{id}/meta_fields/{key}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get meta data */
    get: operations['ProjectsController_getMetaData'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/projects/{id}/general_log/{event_type}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get general log in project */
    get: operations['ProjectsController_getGeneralLog'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/projects/{id}/general_log/keys': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get general log keys in project */
    get: operations['ProjectsController_getGeneralLogKeys'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/projects/{id}/general_log/position/{event_type}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get position general log in project */
    get: operations['ProjectsController_getPositionGeneralLog'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/projects/{id}/general_log/position/keys': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get position general log keys in project */
    get: operations['ProjectsController_getPositionGeneralLogKeys'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0.1/projects': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 自分がアクセス可能なプロジェクト一覧（owner or member） */
    get: operations['ProjectsV01Controller_myProjects'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0.1/projects/{project_id}/members': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** プロジェクトのメンバー一覧 */
    get: operations['ProjectsV01Controller_listMembers'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0.1/projects/{project_id}/members/email': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** メンバー追加（メール指定・既存ユーザーのみ） */
    post: operations['ProjectsV01Controller_addByEmail'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0.1/projects/{project_id}/members/{user_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** メンバー削除（管理権限のみ） */
    delete: operations['ProjectsV01Controller_remove'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0.1/projects/{project_id}/maps': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** プロジェクトのマップ一覧 */
    get: operations['ProjectsV01Controller_getProjectMaps'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/general_log/keys': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['GeneralLogController_getKeys'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/general_log/position/keys': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['GeneralLogController_getPositionKeys'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/general_log/{event_type}/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['GeneralLogController_getLogDetail'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/general_log/position/{event_type}/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['GeneralLogController_getPositionLogDetail'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/projects/{project_id}/play_session': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all play sessions */
    get: operations['PlaySessionController_findAll'];
    put?: never;
    /** Create a play session */
    post: operations['PlaySessionController_create'];
    /** Delete all play sessions */
    delete: operations['PlaySessionController_deleteAll'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/projects/{project_id}/play_session/{session_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a play session */
    get: operations['PlaySessionController_findOne'];
    /** Update a play session */
    put: operations['PlaySessionController_update'];
    post?: never;
    /** Delete a play session */
    delete: operations['PlaySessionController_delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/projects/{project_id}/play_session/{session_id}/finish': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Finish a play session */
    post: operations['PlaySessionController_finish'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/projects/{project_id}/play_session/calc_number_field': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Calculate number field */
    post: operations['PlaySessionController_calcNumberField'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/projects/{project_id}/play_session/{session_id}/general_log/{event_type}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get session general log */
    get: operations['PlaySessionController_getGeneralLog'];
    put?: never;
    /** create general log */
    post: operations['PlaySessionController_createGeneralLog'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/projects/{project_id}/play_session/{session_id}/general_log/keys': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get general log keys */
    get: operations['PlaySessionController_getGeneralLogKeys'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/projects/{project_id}/play_session/{session_id}/general_log/position/{event_type}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get general log */
    get: operations['PlaySessionController_getPositionLog'];
    put?: never;
    /** create position log */
    post: operations['PlaySessionController_createPositionLog'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/projects/{project_id}/play_session/{session_id}/general_log/position/keys': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get general log keys */
    get: operations['PlaySessionController_getPositionLogKeys'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0.1/projects/{project_id}/sessions/{session_id}/maps': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** セッションのマップ一覧 */
    get: operations['PlaySessionV01Controller_getSessionMaps'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/projects/{project_id}/play_session/{session_id}/player_position_log': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get player position logs */
    get: operations['PlayerPositionLogController_get'];
    put?: never;
    /** Upload binary player data */
    post: operations['PlayerPositionLogController_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/projects/{project_id}/play_session/{session_id}/player_position_log/{session_id}/players': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get player IDs from session */
    get: operations['PlayerPositionLogController_getPlayers'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0.1/projects/{project_id}/play_session/{session_id}/player_position_log': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Upload binary player data */
    post: operations['PlayerPositionLogV01Controller_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/heatmap/projects/{project_id}/play_session/{session_id}/tasks': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create heatmap calculation task */
    post: operations['HeatmapController_createSessionTask'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/heatmap/projects/{project_id}/tasks': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create heatmap calculation task for project */
    post: operations['HeatmapController_createProjectTask'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/heatmap/tasks/{task_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get heatmap calculation task */
    get: operations['HeatmapController_getTask'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/heatmap/tasks/{task_id}/maps': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get heatmap map names */
    get: operations['HeatmapController_getTaskMapNames'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/heatmap/map_data/{map_name}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get heatmap map data */
    get: operations['HeatmapController_getMapData'];
    put?: never;
    /** ファイルアップロードエンドポイント */
    post: operations['HeatmapController_postMapData'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/database/backup': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['BackupController_backup'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0.1/projects/{project_id}/sessions/{session_id}/summary': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['SummariesController_latest'];
    put?: never;
    post: operations['SummariesController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/game-api-keys': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * APIキー一覧を取得
     * @description ユーザーが作成した全てのAPIキーの一覧を取得します。
     */
    get: operations['GameApiKeysController_findAll'];
    put?: never;
    /**
     * ゲームクライアント用のAPIキーを作成
     * @description ゲームクライアントから使用するAPIキーを新規作成します。作成されたAPIキーは一度だけ表示され、二度と表示されないため必ず保存してください。
     */
    post: operations['GameApiKeysController_create'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/game-api-keys/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * APIキーの詳細を取得
     * @description 指定されたAPIキーIDの詳細情報を取得します。
     */
    get: operations['GameApiKeysController_findOne'];
    put?: never;
    post?: never;
    /**
     * APIキーを削除
     * @description 指定されたAPIキーを削除します。削除されたAPIキーは使用できなくなります。
     */
    delete: operations['GameApiKeysController_delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/game-api-keys/{id}/projects': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * APIキーがアクセス可能なプロジェクト一覧を取得
     * @description このAPIキーがアクセス可能なプロジェクトの一覧を取得します。
     */
    get: operations['GameApiKeysController_getProjects'];
    /**
     * APIキーがアクセス可能なプロジェクトを設定
     * @description このAPIキーがアクセス可能なプロジェクトを更新します。
     */
    put: operations['GameApiKeysController_updateProjects'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/game/projects': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** アクセス可能なプロジェクト一覧を取得 */
    get: operations['GameController_getProjects'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/game/projects/{project_id}/sessions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** セッションを作成 */
    post: operations['GameController_createSession'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/game/projects/{project_id}/sessions/{session_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** セッションを更新 */
    put: operations['GameController_updateSession'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/game/projects/{project_id}/sessions/{session_id}/finish': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** セッションを終了 */
    post: operations['GameController_finishSession'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/game/projects/{project_id}/sessions/{session_id}/logs/{event_type}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** テキストログを送信 */
    post: operations['GameController_createLog'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/game/projects/{project_id}/sessions/{session_id}/position-logs/{event_type}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 位置ログを送信 */
    post: operations['GameController_createPositionLog'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v0/game/projects/{project_id}/sessions/{session_id}/player-positions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** プレイヤー位置ログをバイナリでまとめて送信（V2フォーマット対応） */
    post: operations['GameController_uploadPlayerPositions'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    UserResponseDto: {
      id: string;
      email: string;
      name: string;
      role: string;
    };
    CreateUserDto: {
      /** @example name */
      name?: string;
      /** @example password */
      password: string;
      email: string;
    };
    GoogleStartQueryDto: {
      /** @description 署名付きのstate（CSRF防止やモード伝播用）。リンク時はAuthControllerが自動生成。 */
      state?: string;
    };
    GoogleLinkQueryDto: {
      /** @description リンク完了後に戻る先（フロントのURL） */
      returnTo?: string;
    };
    GoogleCallbackQueryDto: {
      /** @description 署名付きstate（自前検証用） */
      state?: string;
      /** @description Google側エラー（存在する場合） */
      error?: string;
      code?: string;
      scope?: string;
      authuser?: string;
      prompt?: string;
      hd?: string;
    };
    LoginUserDto: {
      /** @example password */
      password: string;
      email: string;
    };
    LoginResponseDto: {
      accessToken: string;
      user: components['schemas']['UserResponseDto'];
    };
    ProjectResponseDto: {
      id: number;
      name: string;
      description: string;
      is2D: boolean;
      /** Format: date-time */
      createdAt: string;
      user?: components['schemas']['UserResponseDto'] | null;
      session_count?: number;
    };
    CreateProjectDto: {
      /** @example name */
      name: string;
      /** @example description */
      description: string;
    };
    DefaultSuccessResponse: {
      /** @example true */
      success: boolean;
      /** @example message */
      message: string | null;
    };
    CalcFieldResponseDto: {
      /** @example field */
      fields: string[];
    };
    GetMetaDataDto: {
      values: string[];
    };
    StringGeneralLogDataDto: {
      text: string;
    };
    StringGeneralLogDto: {
      id: number;
      event_type: string;
      event_data: components['schemas']['StringGeneralLogDataDto'];
      offset_timestamp: number;
      player: number;
    };
    GetGeneralLogKeysDto: {
      /** @description List of keys to retrieve */
      keys: string[];
    };
    Position: {
      /** Format: float */
      x: number;
      /** Format: float */
      y: number;
      /** Format: float */
      z: number;
    };
    PositionGeneralLogDto: {
      id: number;
      event_type: string;
      event_data: components['schemas']['Position'];
      offset_timestamp: number;
      player: number;
    };
    ProjectMemberDto: {
      user_id: string;
      project_id: number;
      /** @enum {string} */
      role: 'admin' | 'viewer';
      email: string;
      name: string;
      /** Format: date-time */
      created_at: string;
    };
    ProjectResponseV01Dto: {
      id: number;
      name: string;
      description: string;
      is2D: boolean;
      /** Format: date-time */
      createdAt: string;
      user?: components['schemas']['UserResponseDto'] | null;
      memberships: components['schemas']['ProjectMemberDto'][];
      session_count?: number;
    };
    AddMemberByEmailDto: {
      email: string;
      /** @enum {string} */
      role?: 'admin' | 'viewer';
    };
    GetMapsDto: {
      maps: string[];
    };
    StringGeneralLogDetailDto: {
      id: number;
      event_type: string;
      event_data: components['schemas']['StringGeneralLogDataDto'];
      offset_timestamp: number;
      player: number;
      project_id: number;
      session_id: number;
    };
    PositionGeneralLogDetailDto: {
      id: number;
      event_type: string;
      event_data: components['schemas']['Position'];
      offset_timestamp: number;
      player: number;
      project_id: number;
      session_id: number;
    };
    PlaySessionResponseDto: {
      sessionId: number;
      projectId: number;
      name: string;
      deviceId: string | null;
      /** @example platform */
      platform: string | null;
      /** @example app_version */
      appVersion: string | null;
      /** @example meta_data */
      metaData: Record<string, never> | null;
      /**
       * Format: date-time
       * @example start_time
       */
      startTime: string;
      /**
       * Format: date-time
       * @example end_time
       */
      endTime: string | null;
      /** @example is_playing */
      isPlaying: boolean;
    };
    CreatePlaySessionDto: {
      name?: string | null;
      deviceId?: string | null;
      platform?: string | null;
      appVersion?: string | null;
      metaData?: Record<string, never> | null;
    };
    UpdatePlaySessionDto: {
      name?: string;
      deviceId?: string | null;
      platform?: string | null;
      appVersion?: string | null;
      metaData?: Record<string, never> | null;
    };
    CalcFieldRequestDto: {
      /** @example field */
      field: string;
    };
    CalcNumberFieldDto: {
      min: number;
      max: number;
      avg: number;
    };
    CreateGeneralLogDto: {
      text_data: string | null;
      position_data: components['schemas']['Position'] | null;
      offset_timestamp: number;
      player: number;
    };
    PlayPositionLogDto: {
      /**
       * @description Player identifier
       * @example 1
       */
      player: number;
      x: number;
      y: number;
      z?: number | null;
      offset_timestamp: number;
      location?: string | null;
      status?: Record<string, never> | null;
    };
    CreateHeatmapDto: {
      /**
       * @description Heatmap width
       * @example 300
       */
      stepSize?: number;
      /**
       * @description Whether to display the Z-axis
       * @example false
       */
      zVisible?: boolean;
    };
    HeatMapTaskResultListItem: {
      /**
       * @description X
       * @example 0
       */
      x: number;
      /**
       * @description Y
       * @example 0
       */
      y: number;
      /**
       * @description Z
       * @example 0
       */
      z?: number;
      /**
       * @description Density
       * @example 0
       */
      density: number;
    };
    HeatmapTaskDto: {
      /**
       * @description Task ID
       * @example 1
       */
      taskId: number;
      /**
       * @description Project
       * @example {
       *       "id": 1,
       *       "name": "Project 1",
       *       "description": "Project 1 description",
       *       "createdAt": "2021-01-01T00:00:00.000Z"
       *     }
       */
      project: components['schemas']['ProjectResponseDto'];
      /**
       * @description Session
       * @example {
       *       "sessionId": 0,
       *       "projectId": 0,
       *       "name": "string",
       *       "deviceId": "string",
       *       "platform": "platform",
       *       "appVersion": "app_version",
       *       "metaData": "meta_data",
       *       "startTime": "2021-01-01T00:00:00.000Z",
       *       "endTime": "2021-01-01T00:00:00.000Z",
       *       "isPlaying": true
       *     }
       */
      session?: components['schemas']['PlaySessionResponseDto'];
      /**
       * @description Step size
       * @example 200
       */
      stepSize: number;
      /**
       * @description Z visible
       * @example true
       */
      zVisible: boolean;
      /**
       * @description Status
       * @example completed
       * @enum {string}
       */
      status: 'pending' | 'processing' | 'completed' | 'failed';
      /**
       * @description Result list
       * @example [
       *       {
       *         "x": 0,
       *         "y": 0,
       *         "z": 0,
       *         "density": 0
       *       }
       *     ]
       */
      result?: components['schemas']['HeatMapTaskResultListItem'][] | null;
      /**
       * Format: date-time
       * @description Created at
       * @example 2021-01-01T00:00:00.000Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Updated at
       * @example 2021-01-01T00:00:00.000Z
       */
      updatedAt: string;
    };
    SessionSummaryDto: {
      /**
       * @description Summary UUID
       * @example 8c7b3c7a-1c6a-41a4-9a9b-9b1c1d2e3f4a
       */
      id: string;
      /** @enum {string} */
      status: 'queued' | 'running' | 'done' | 'error';
      /** @enum {string} */
      lang: 'ja' | 'en';
      /** @enum {string} */
      provider: 'template' | 'ollama' | 'openai';
      /** @example gpt-4o-mini */
      model: string | null;
      summary_md: string | null;
      summary_json: {
        [key: string]: unknown;
      } | null;
      /** Format: date-time */
      created_at: string;
    };
    CreateGameApiKeyDto: {
      /**
       * @description APIキーの識別名
       * @example My Unity Game Client
       */
      name: string;
    };
    CreateGameApiKeyResponseDto: {
      /** @description APIキーID */
      id: string;
      /** @description APIキーの識別名 */
      name: string;
      /** @description APIキー本体（この画面でのみ表示されます。必ず保存してください） */
      apiKey: string;
      /**
       * Format: date-time
       * @description 作成日時
       */
      createdAt: string;
    };
    GameApiKeyResponseDto: {
      /** @description APIキーID */
      id: string;
      /** @description APIキーの識別名 */
      name: string;
      /** @description アクティブ状態 */
      isActive: boolean;
      /**
       * Format: date-time
       * @description 最終使用日時
       */
      lastUsedAt: string | null;
      /**
       * Format: date-time
       * @description 作成日時
       */
      createdAt: string;
      /** @description アクセス可能なプロジェクトのリスト */
      projects: components['schemas']['ProjectResponseDto'][];
      /**
       * @deprecated
       * @description アクセス可能なプロジェクトIDのリスト (deprecated: use projects instead)
       */
      projectIds: number[];
    };
    UpdateGameApiKeyProjectsDto: {
      /**
       * @description アクセスを許可するプロジェクトIDのリスト
       * @example [
       *       1,
       *       2,
       *       3
       *     ]
       */
      projectIds: number[];
    };
    DefaultErrorResponse: {
      /** @example 400 */
      code: number;
      /** @example Bad Request */
      message: string;
      /** @example Invalid input data */
      error?: string | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  AppController_getHello: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  AppController_getRobots: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  AppController_getPing: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description pong */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  UsersController_findAll: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 成功 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserResponseDto'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  UsersController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateUserDto'];
      };
    };
    responses: {
      /** @description 成功 */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserResponseDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  UsersController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 成功 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserResponseDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  AuthController_googleStart: {
    parameters: {
      query?: {
        state?: components['schemas']['GoogleStartQueryDto'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Redirect to Google consent screen */
      302: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  AuthController_googleLink: {
    parameters: {
      query?: {
        /** @description リンク完了後に戻る先（フロントのURL） */
        returnTo?: components['schemas']['GoogleLinkQueryDto'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Redirect to /api/v0/auth/google with signed state */
      302: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  AuthController_googleCallback: {
    parameters: {
      query?: {
        /** @description 署名付きstate（自前検証用） */
        state?: components['schemas']['GoogleCallbackQueryDto'];
        /** @description Google側エラー（存在する場合） */
        error?: string;
        code?: string;
        scope?: string;
        authuser?: string;
        prompt?: string;
        hd?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Redirect back to front-end with token or error code */
      302: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  AuthController_unlinkGoogle: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Unlinked */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  LoginController_login: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginUserDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['LoginResponseDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  LoginController_getProfile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserResponseDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  ProjectsController_findAll: {
    parameters: {
      query?: {
        limit?: number;
        offset?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ProjectResponseDto'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  ProjectsController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateProjectDto'];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultSuccessResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  ProjectsController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ProjectResponseDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  ProjectsController_delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultSuccessResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  ProjectsController_getMetaDataKeys: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CalcFieldResponseDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  ProjectsController_getMetaData: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
        key: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetMetaDataDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  ProjectsController_getGeneralLog: {
    parameters: {
      query?: {
        limit?: number;
        offset?: number;
      };
      header?: never;
      path: {
        id: number;
        event_type: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['StringGeneralLogDto'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  ProjectsController_getGeneralLogKeys: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetGeneralLogKeysDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  ProjectsController_getPositionGeneralLog: {
    parameters: {
      query?: {
        limit?: number;
        offset?: number;
      };
      header?: never;
      path: {
        id: number;
        event_type: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PositionGeneralLogDto'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  ProjectsController_getPositionGeneralLogKeys: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetGeneralLogKeysDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  ProjectsV01Controller_myProjects: {
    parameters: {
      query?: {
        /** @description Number of logs to return (default: 20) */
        limit?: number;
        /** @description Offset for pagination (default: 0) */
        offset?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ProjectResponseV01Dto'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  ProjectsV01Controller_listMembers: {
    parameters: {
      query?: {
        /** @description Number of logs to return (default: 20) */
        limit?: number;
        /** @description Offset for pagination (default: 0) */
        offset?: number;
      };
      header?: never;
      path: {
        project_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ProjectMemberDto'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  ProjectsV01Controller_addByEmail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AddMemberByEmailDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ProjectMemberDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  ProjectsV01Controller_remove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: number;
        user_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultSuccessResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  ProjectsV01Controller_getProjectMaps: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetMapsDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  GeneralLogController_getKeys: {
    parameters: {
      query: {
        project_id: number;
        session_id?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetGeneralLogKeysDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  GeneralLogController_getPositionKeys: {
    parameters: {
      query: {
        project_id: number;
        session_id?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetGeneralLogKeysDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  GeneralLogController_getLogDetail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
        event_type: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['StringGeneralLogDetailDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  GeneralLogController_getPositionLogDetail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
        event_type: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PositionGeneralLogDetailDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  PlaySessionController_findAll: {
    parameters: {
      query?: {
        limit?: number;
        offset?: number;
        isFinished?: boolean;
      };
      header?: never;
      path: {
        project_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PlaySessionResponseDto'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  PlaySessionController_create: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePlaySessionDto'];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PlaySessionResponseDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  PlaySessionController_deleteAll: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PlaySessionResponseDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  PlaySessionController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: number;
        session_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PlaySessionResponseDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  PlaySessionController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: number;
        session_id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePlaySessionDto'];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PlaySessionResponseDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  PlaySessionController_delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: number;
        session_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  PlaySessionController_finish: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: number;
        session_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PlaySessionResponseDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  PlaySessionController_calcNumberField: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CalcFieldRequestDto'];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CalcNumberFieldDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  PlaySessionController_getGeneralLog: {
    parameters: {
      query?: {
        limit?: number;
        offset?: number;
      };
      header?: never;
      path: {
        project_id: number;
        session_id: number;
        event_type: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['StringGeneralLogDto'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  PlaySessionController_createGeneralLog: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: number;
        session_id: number;
        event_type: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateGeneralLogDto'];
      };
    };
    responses: {
      /** @description Success */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['StringGeneralLogDto'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  PlaySessionController_getGeneralLogKeys: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: number;
        session_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetGeneralLogKeysDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  PlaySessionController_getPositionLog: {
    parameters: {
      query?: {
        limit?: number;
        offset?: number;
      };
      header?: never;
      path: {
        project_id: number;
        session_id: number;
        event_type: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PositionGeneralLogDto'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  PlaySessionController_createPositionLog: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: number;
        session_id: number;
        event_type: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateGeneralLogDto'];
      };
    };
    responses: {
      /** @description Success */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PositionGeneralLogDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  PlaySessionController_getPositionLogKeys: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: number;
        session_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetGeneralLogKeysDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  PlaySessionV01Controller_getSessionMaps: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: number;
        session_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string[];
        };
      };
    };
  };
  PlayerPositionLogController_get: {
    parameters: {
      query?: {
        /** @description Filter by player ID (optional) */
        player?: number;
        /** @description Number of logs to return (default: 20) */
        limit?: number;
        /** @description Offset for pagination (default: 0) */
        offset?: number;
      };
      header?: never;
      path: {
        project_id: number;
        session_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PlayPositionLogDto'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  PlayerPositionLogController_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: number;
        session_id: number;
      };
      cookie?: never;
    };
    /** @description Binary data containing meta information and player positions */
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultSuccessResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  PlayerPositionLogController_getPlayers: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: number;
        session_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': number[];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  PlayerPositionLogV01Controller_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: number;
        session_id: number;
      };
      cookie?: never;
    };
    /** @description Binary data containing meta information and player positions */
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultSuccessResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  HeatmapController_createSessionTask: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: number;
        session_id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateHeatmapDto'];
      };
    };
    responses: {
      /** @description Task created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HeatmapTaskDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  HeatmapController_createProjectTask: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        project_id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateHeatmapDto'];
      };
    };
    responses: {
      /** @description Task created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HeatmapTaskDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  HeatmapController_getTask: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        task_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Task details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HeatmapTaskDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  HeatmapController_getTaskMapNames: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        task_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Map names */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetMapsDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  HeatmapController_getMapData: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        map_name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Map data */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/octet-stream': string;
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  HeatmapController_postMapData: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        map_name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description Map data uploaded */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultSuccessResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  BackupController_backup: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  SummariesController_latest: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Project ID */
        project_id: number;
        /** @description Session ID */
        session_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SessionSummaryDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
      /** @description Summary not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SummariesController_create: {
    parameters: {
      query: {
        /** @description Language */
        lang?: 'ja' | 'en';
        /** @description Step size */
        step_size?: number;
        /** @description Z-axis visibility */
        z_visible: boolean;
        /** @description Summarization provider */
        provider?: 'template' | 'openai' | 'ollama';
      };
      header?: never;
      path: {
        /** @description Project ID */
        project_id: number;
        /** @description Session ID */
        session_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SessionSummaryDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  GameApiKeysController_findAll: {
    parameters: {
      query?: {
        /** @description Number of API keys to return (default: 20, max: 100) */
        limit?: number;
        /** @description Offset for pagination (default: 0) */
        offset?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GameApiKeyResponseDto'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  GameApiKeysController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateGameApiKeyDto'];
      };
    };
    responses: {
      /** @description Created - APIキーが正常に作成されました */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CreateGameApiKeyResponseDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  GameApiKeysController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description API Key ID */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GameApiKeyResponseDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  GameApiKeysController_delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description API Key ID */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  GameApiKeysController_getProjects: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description API Key ID */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ProjectResponseDto'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  GameApiKeysController_updateProjects: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description API Key ID */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateGameApiKeyProjectsDto'];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GameApiKeyResponseDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  GameController_getProjects: {
    parameters: {
      query?: {
        /** @description Number of projects to return (default: 20, max: 100) */
        limit?: number;
        /** @description Offset for pagination (default: 0) */
        offset?: number;
      };
      header: {
        /** @description ゲームクライアント用APIキー */
        'X-API-Key': string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ProjectResponseDto'][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  GameController_createSession: {
    parameters: {
      query?: never;
      header: {
        /** @description ゲームクライアント用APIキー */
        'X-API-Key': string;
      };
      path: {
        /** @description Project ID */
        project_id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePlaySessionDto'];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PlaySessionResponseDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  GameController_updateSession: {
    parameters: {
      query?: never;
      header: {
        /** @description ゲームクライアント用APIキー */
        'X-API-Key': string;
      };
      path: {
        /** @description Project ID */
        project_id: number;
        /** @description Session ID */
        session_id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePlaySessionDto'];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PlaySessionResponseDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  GameController_finishSession: {
    parameters: {
      query?: never;
      header: {
        /** @description ゲームクライアント用APIキー */
        'X-API-Key': string;
      };
      path: {
        /** @description Project ID */
        project_id: number;
        /** @description Session ID */
        session_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PlaySessionResponseDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  GameController_createLog: {
    parameters: {
      query?: never;
      header: {
        /** @description ゲームクライアント用APIキー */
        'X-API-Key': string;
      };
      path: {
        /** @description Project ID */
        project_id: number;
        /** @description Session ID */
        session_id: number;
        /** @description Event type */
        event_type: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateGeneralLogDto'];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['StringGeneralLogDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  GameController_createPositionLog: {
    parameters: {
      query?: never;
      header: {
        /** @description ゲームクライアント用APIキー */
        'X-API-Key': string;
      };
      path: {
        /** @description Project ID */
        project_id: number;
        /** @description Session ID */
        session_id: number;
        /** @description Event type */
        event_type: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateGeneralLogDto'];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PositionGeneralLogDto'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
  GameController_uploadPlayerPositions: {
    parameters: {
      query?: never;
      header: {
        /** @description ゲームクライアント用APIキー */
        'X-API-Key': string;
      };
      path: {
        /** @description Project ID */
        project_id: number;
        /** @description Session ID */
        session_id: number;
      };
      cookie?: never;
    };
    /** @description Binary data containing player positions (V1 or V2 format) */
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultSuccessResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DefaultErrorResponse'];
        };
      };
    };
  };
}
